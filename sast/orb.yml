version: 2.1
description: |
    An orb to run SAST scans against various types of code
display:
    home_url: https://github.com/ovotech/team-cppe/blob/main/circleci-orbs/sast/README.md
    source_url: https://github.com/ovotech/team-cppe
commands:
    install_checkov:
        description: |
            Installs the given version of checkov, or the latest one if none provided
        parameters:
            version:
                default: ""
                description: The version of checkov to install
                type: string
        steps:
            - when:
                condition: << parameters.version >>
                steps:
                    - run:
                        command: pip3 install "checkov==<< parameters.version >>"
                        name: Install version << parameters.version >> of checkov
            - when:
                condition:
                    not: << parameters.version >>
                steps:
                    - run:
                        command: pip3 install checkov
                        name: Install latest version of checkov
            - run: checkov --version
    install_hadolint:
        description: |
            Installs the given version of hadolint, or the latest one if none provided
        parameters:
            version:
                default: ""
                description: The version of hadolint to install
                type: string
        steps:
            - when:
                condition: << parameters.version >>
                steps:
                    - run:
                        command: |
                            echo -e "\n\n===================================================="
                            version=<< parameters.version >>
                            echo "Downloading Hadolint $version"
                            wget -O /home/circleci/bin/hadolint https://github.com/hadolint/hadolint/releases/download/${version}/hadolint-Linux-x86_64 && chmod +x /home/circleci/bin/hadolint
                            echo "Installed successfully"
                            echo -e "\n\n===================================================="
                            echo "Current hadolint version"
                        name: Install version << parameters.version >> of hadolint
            - when:
                condition:
                    not: << parameters.version >>
                steps:
                    - run:
                        command: |
                            echo -e "\n\n===================================================="
                            echo "Looking up the latest version ..."
                            version=$(curl --silent "https://api.github.com/repos/hadolint/hadolint/releases/latest" | grep '"tag_name":' | sed -E 's/.*"([^"]+)".*/\1/')
                            echo "Downloading Hadolint $version"
                            wget -O /home/circleci/bin/hadolint https://github.com/hadolint/hadolint/releases/download/${version}/hadolint-Linux-x86_64 && chmod +x /home/circleci/bin/hadolint
                            echo "Installed successfully"
                            echo -e "\n\n===================================================="
                            echo "Current hadolint version"
                        name: Install latest version of hadolint
            - run: hadolint --version
    install_semgrep:
        description: |
            Installs the given version of semgrep, or the latest one if none provided
        parameters:
            version:
                default: ""
                description: The version of semgrep to install
                type: string
        steps:
            - when:
                condition: << parameters.version >>
                steps:
                    - run:
                        command: pip install "semgrep==<< parameters.version >>"
                        name: Install version << parameters.version >> of semgrep
            - when:
                condition:
                    not: << parameters.version >>
                steps:
                    - run:
                        command: pip install semgrep
                        name: Install latest version of semgrep
            - run: semgrep --version
    scan_dockerfile:
        description: |
            Lint a given Dockerfile using a hadolint Docker image: https://hub.docker.com/r/hadolint/hadolint
        parameters:
            dockerfile:
                default: Dockerfile
                description: |
                    Relative or absolute path, including name, to the Dockerfile to be linted, e.g., `~/project/app/deploy.Dockerfile`, defaults to a Dockerfile named `Dockerfile` in the working directory.
                type: string
            ignore-rules:
                default: ""
                description: |
                    Comma-separated string list of rules to ignore (e.g., `DL3000,SC1010`): https://github.com/hadolint/hadolint#rules
                type: string
            trusted-registries:
                default: ""
                description: |
                    Comma-separated list of trusted registries (e.g., `docker.io,my-company.com:5000`); if set, return an error if Dockerfile use any images from registries not included in this list
                type: string
        steps:
            - checkout
            - install_hadolint
            - run:
                command: "#!/bin/bash\nscan_dockerfile() {\n    set --\n    if [ -n \"$PARAM_IGNORE_RULES\" ]; then\n        IFS=, read -ra IGNORE_RULES \\<<< \"$PARAM_IGNORE_RULES\"\n        for RULE in \"${IGNORE_RULES[@]}\"; do\n          set -- \"$@\" \"--ignore\" \"${RULE}\"\n        done\n    fi\n\n    if [ -n \"$PARAM_TRUSTED_REGISTRIES\" ]; then\n        IFS=, read -ra TRUSTED_REGISTRIES \\<<< \"$PARAM_TRUSTED_REGISTRIES\"\n        for TRUSTED_REGISTRY in \"${TRUSTED_REGISTRIES[@]}\"; do\n          set -- \"$@\" \"--trusted-registry\" \"${TRUSTED_REGISTRY}\"\n        done\n    fi\n    printf '%s\\n' \"Running hadolint on $PARAM_DOCKERFILE\"\n\n    if [ ! -d \"./reports/sast/docker\" ]; then\n        mkdir -p ./reports/sast/docker\n    fi\n\n    hadolint --no-fail \"$@\" \"$PARAM_DOCKERFILE\"\n    hadolint --format json \"$@\" \"$PARAM_DOCKERFILE\" 1> \"./reports/sast/docker/$(date \"+%F-%H-%M-%S\").json\"\n\n    local STATUS_CODE=$?\n    if [ $STATUS_CODE -eq 0 ]; then\n        printf '%s\\n' \"Docker file scan succeeded with no linting issues!!!\"\n    else\n        printf '%s\\n' \"Docker file scan failed with linting issues, see report folder!!!\" \n        return $STATUS_CODE\n    fi\n}\n\n# Will not run if sourced for bats-core tests.\nORB_TEST_ENV=\"bats-core\"\nif [ \"${0#*\"$ORB_TEST_ENV\"}\" == \"$0\" ]; then\n    scan_dockerfile   \nfi\n"
                environment:
                    PARAM_DOCKERFILE: <<parameters.dockerfile>>
                    PARAM_IGNORE_RULES: <<parameters.ignore-rules>>
                    PARAM_TRUSTED_REGISTRIES: <<parameters.trusted-registries>>
                name: Lint <<parameters.dockerfile>> with hadolint
            - store_artifacts:
                path: ./reports/sast/docker/
    scan_python:
        description: |
            Scans a Python project using Semgrep
        parameters:
            directory:
                default: .
                description: |
                    Path to the directory containing the source code to be scanned. Defaults to the current working directory
                type: string
        steps:
            - checkout
            - install_semgrep
            - run:
                command: |
                    #!/bin/bash
                    set -euo pipefail

                    scan_semgrep() {
                      set --
                      set -- "$@" "--config" "r/${PARAM_LANGUAGE}"
                      set -- "$@" "--metrics" "off"
                      set -- "$@" "--disable-version-check"
                      set -- "$@" "--strict"

                      if [[ ! -d "./reports/sast/${PARAM_LANGUAGE}" ]]; then
                        mkdir -p "./reports/sast/${PARAM_LANGUAGE}"
                      fi

                      semgrep scan "$@" --error "${PARAM_DIRECTORY}" || _EC=$?
                      semgrep scan "$@" --disable-nosem --json --output "./reports/sast/${PARAM_LANGUAGE}/$(date "+%F-%H-%M-%S").json" "${PARAM_DIRECTORY}"

                      if [[ "${_EC:-0}" -gt 0 ]]; then
                        echo "Semgrep scan returned failures. See logs."
                        return ${_EC}
                      fi
                    }

                    # Will not run if sourced for bats-core tests.
                    ORB_TEST_ENV="bats-core"
                    if [ "${0#*"$ORB_TEST_ENV"}" == "$0" ]; then
                        scan_semgrep
                    fi
                environment:
                    PARAM_DIRECTORY: <<parameters.directory>>
                    PARAM_LANGUAGE: python
                name: Lint Python code in <<parameters.directory>> with Semgrep
            - store_artifacts:
                path: ./reports/sast/python/
    scan_scala:
        description: |
            Scans a Scala project using Semgrep
        parameters:
            directory:
                default: .
                description: |
                    Path to the directory containing the Scala code to be scanned. Defaults to the current working directory
                type: string
        steps:
            - checkout
            - install_semgrep
            - run:
                command: |
                    #!/bin/bash
                    set -euo pipefail

                    scan_semgrep() {
                      set --
                      set -- "$@" "--config" "r/${PARAM_LANGUAGE}"
                      set -- "$@" "--metrics" "off"
                      set -- "$@" "--disable-version-check"
                      set -- "$@" "--strict"

                      if [[ ! -d "./reports/sast/${PARAM_LANGUAGE}" ]]; then
                        mkdir -p "./reports/sast/${PARAM_LANGUAGE}"
                      fi

                      semgrep scan "$@" --error "${PARAM_DIRECTORY}" || _EC=$?
                      semgrep scan "$@" --disable-nosem --json --output "./reports/sast/${PARAM_LANGUAGE}/$(date "+%F-%H-%M-%S").json" "${PARAM_DIRECTORY}"

                      if [[ "${_EC:-0}" -gt 0 ]]; then
                        echo "Semgrep scan returned failures. See logs."
                        return ${_EC}
                      fi
                    }

                    # Will not run if sourced for bats-core tests.
                    ORB_TEST_ENV="bats-core"
                    if [ "${0#*"$ORB_TEST_ENV"}" == "$0" ]; then
                        scan_semgrep
                    fi
                environment:
                    PARAM_DIRECTORY: <<parameters.directory>>
                    PARAM_LANGUAGE: scala
                name: Lint Scala code in <<parameters.directory>> with Semgrep
            - store_artifacts:
                path: ./reports/sast/scala/
    scan_terraform:
        description: |
            Run Checkov Infrastructure as code static analysis against a directory
        parameters:
            baseline:
                default: ""
                description: Path to a .checkov.baseline file to compare. Report will include only failed checks that are not in the baseline
                type: string
            config_file:
                default: ""
                description: checkov configuration file
                type: string
            directory:
                default: .
                description: directory with infrastructure code to scan
                type: string
        steps:
            - checkout
            - install_checkov
            - run:
                command: |+
                    #!/bin/bash

                    run_checkov() {
                        checkov --version

                        set --
                        set -- "$@" "--output" "cli"
                        set -- "$@" "--framework" "terraform"
                        set -- "$@" "--download-external-modules" "false"

                        if [ -z "$PARAM_BASELINE" ]; then
                            DEFAULT_BASELINE=$(find "$PARAM_DIRECTORY" -name ".checkov.baseline")
                            if [ -n "$DEFAULT_BASELINE" ]; then
                                set -- "$@" "--baseline" "$DEFAULT_BASELINE"
                            else
                                DEFAULT_BASELINE=$(find . -name ".checkov.baseline")
                                if [ -n "$DEFAULT_BASELINE" ]; then
                                    set -- "$@" "--baseline" "$DEFAULT_BASELINE"
                                fi
                            fi
                        else
                            set -- "$@" "--baseline" "$PARAM_BASELINE"
                        fi

                        if [[ -n "$PARAM_CONFIG_FILE" ]]; then
                            set -- "$@" "--config-file" "$PARAM_CONFIG_FILE"
                        fi

                        echo "running checkov on directory $PARAM_DIRECTORY:"
                        echo "checkov -d $PARAM_DIRECTORY --quiet" "$@"
                        if [ ! -d "./reports/sast/terraform" ]; then
                            mkdir -p ./reports/sast/terraform
                        fi

                        export LOG_LEVEL="WARNING"
                        checkov -d "$PARAM_DIRECTORY" --quiet --output json --soft-fail "$@" 1> "./reports/sast/terraform/$(date "+%F-%H-%M-%S").json"
                        checkov -d "$PARAM_DIRECTORY" --quiet "$@"
                    }

                    # Will not run if sourced for bats-core tests.
                    ORB_TEST_ENV="bats-core"
                    if [ "${0#*"$ORB_TEST_ENV"}" == "$0" ]; then
                        run_checkov
                    fi

                environment:
                    PARAM_BASELINE: <<parameters.baseline>>
                    PARAM_CONFIG_FILE: <<parameters.config_file>>
                    PARAM_DIRECTORY: <<parameters.directory>>
                name: Run Checkov command line
            - store_artifacts:
                path: ./reports/sast/terraform/
    scan_typescript:
        description: |
            Scans a TypeScript project using Semgrep
        parameters:
            directory:
                default: .
                description: |
                    Path to the directory containing the source code to be scanned. Defaults to the current working directory
                type: string
        steps:
            - checkout
            - install_semgrep
            - run:
                command: |
                    #!/bin/bash
                    set -euo pipefail

                    scan_semgrep() {
                      set --
                      set -- "$@" "--config" "r/${PARAM_LANGUAGE}"
                      set -- "$@" "--metrics" "off"
                      set -- "$@" "--disable-version-check"
                      set -- "$@" "--strict"

                      if [[ ! -d "./reports/sast/${PARAM_LANGUAGE}" ]]; then
                        mkdir -p "./reports/sast/${PARAM_LANGUAGE}"
                      fi

                      semgrep scan "$@" --error "${PARAM_DIRECTORY}" || _EC=$?
                      semgrep scan "$@" --disable-nosem --json --output "./reports/sast/${PARAM_LANGUAGE}/$(date "+%F-%H-%M-%S").json" "${PARAM_DIRECTORY}"

                      if [[ "${_EC:-0}" -gt 0 ]]; then
                        echo "Semgrep scan returned failures. See logs."
                        return ${_EC}
                      fi
                    }

                    # Will not run if sourced for bats-core tests.
                    ORB_TEST_ENV="bats-core"
                    if [ "${0#*"$ORB_TEST_ENV"}" == "$0" ]; then
                        scan_semgrep
                    fi
                environment:
                    PARAM_DIRECTORY: <<parameters.directory>>
                    PARAM_LANGUAGE: typescript
                name: Lint TypeScript code in <<parameters.directory>> with Semgrep
            - store_artifacts:
                path: ./reports/sast/typescript/
executors:
    default:
        description: |
            This is the default executor.
        docker:
            - image: cimg/python:3.9
    scan_dockerfile_executor:
        description: |
            This is a sample executor using Ubuntu.
        docker:
            - image: cimg/base:current-22.04
jobs:
    scan_dockerfile:
        description: |
            Lint a given Dockerfile using a hadolint Docker image: https://hub.docker.com/r/hadolint/hadolint
        executor: scan_dockerfile_executor
        parameters:
            attach-workspace:
                default: false
                description: |
                    Boolean for whether or not to attach to an existing workspace, default is false
                type: boolean
            checkout:
                default: true
                description: Checkout as a first step? Default is true
                type: boolean
            dockerfile:
                default: Dockerfile
                description: |
                    Relative or absolute path, including name, to the Dockerfile to be linted, e.g., `~/project/app/deploy.Dockerfile`, defaults to a Dockerfile named `Dockerfile` in the working directory.
                type: string
            ignore-rules:
                default: ""
                description: |
                    Comma-separated string list of rules to ignore (e.g., `DL3000,SC1010`): https://github.com/hadolint/hadolint#rules
                type: string
            trusted-registries:
                default: ""
                description: |
                    Comma-separated list of trusted registries (e.g., `docker.io,my-company.com:5000`); if set, return an error if Dockerfile use any images from registries not included in this list
                type: string
            workspace-root:
                default: workspace
                description: |
                    Workspace root path that is either an absolute path or a path relative to the working directory
                type: string
        steps:
            - when:
                condition: <<parameters.checkout>>
                steps:
                    - checkout
            - when:
                condition: <<parameters.attach-workspace>>
                steps:
                    - attach_workspace:
                        at: <<parameters.workspace-root>>
            - scan_dockerfile:
                dockerfile: <<parameters.dockerfile>>
                ignore-rules: <<parameters.ignore-rules>>
                trusted-registries: <<parameters.trusted-registries>>
    scan_python:
        description: |
            Scans a Python project using Semgrep
        executor: default
        parameters:
            attach-workspace:
                default: false
                description: |
                    Boolean for whether or not to attach to an existing workspace, default is false
                type: boolean
            checkout:
                default: true
                description: Checkout as a first step? Default is true
                type: boolean
            directory:
                default: .
                description: |
                    Path to the directory containing the Scala code to be scanned. Defaults to the current working directory
                type: string
            workspace-root:
                default: workspace
                description: |
                    Workspace root path that is either an absolute path or a path relative to the working directory
                type: string
        steps:
            - when:
                condition: <<parameters.checkout>>
                steps:
                    - checkout
            - when:
                condition: <<parameters.attach-workspace>>
                steps:
                    - attach_workspace:
                        at: <<parameters.workspace-root>>
            - scan_python:
                directory: <<parameters.directory>>
    scan_scala:
        description: |
            Scans a Scala project using Semgrep
        executor: default
        parameters:
            attach-workspace:
                default: false
                description: |
                    Boolean for whether or not to attach to an existing workspace, default is false
                type: boolean
            checkout:
                default: true
                description: Checkout as a first step? Default is true
                type: boolean
            directory:
                default: .
                description: |
                    Path to the directory containing the Scala code to be scanned. Defaults to the current working directory
                type: string
            workspace-root:
                default: workspace
                description: |
                    Workspace root path that is either an absolute path or a path relative to the working directory
                type: string
        steps:
            - when:
                condition: <<parameters.checkout>>
                steps:
                    - checkout
            - when:
                condition: <<parameters.attach-workspace>>
                steps:
                    - attach_workspace:
                        at: <<parameters.workspace-root>>
            - scan_scala:
                directory: <<parameters.directory>>
    scan_terraform:
        description: |
            Scans terraform files using Checkov Infrastructure as code static analysis against a directory
        executor: default
        parameters:
            attach-workspace:
                default: false
                description: |
                    Boolean for whether or not to attach to an existing workspace, default is false
                type: boolean
            baseline:
                default: ""
                description: Path to a .checkov.baseline file to compare. Report will include only failed checks that are not in the baseline
                type: string
            checkout:
                default: true
                description: Checkout as a first step? Default is true
                type: boolean
            config_file:
                default: ""
                description: checkov configuration file
                type: string
            directory:
                default: .
                description: directory with infrastructure code to scan
                type: string
            workspace-root:
                default: workspace
                description: |
                    Workspace root path that is either an absolute path or a path relative to the working directory
                type: string
        steps:
            - when:
                condition: <<parameters.checkout>>
                steps:
                    - checkout
            - when:
                condition: <<parameters.attach-workspace>>
                steps:
                    - attach_workspace:
                        at: <<parameters.workspace-root>>
            - scan_terraform:
                baseline: << parameters.baseline >>
                config_file: << parameters.config_file >>
                directory: << parameters.directory >>
    scan_typescript:
        description: |
            Scans a TypeScript project using Semgrep
        executor: default
        parameters:
            attach-workspace:
                default: false
                description: |
                    Boolean for whether or not to attach to an existing workspace, default is false
                type: boolean
            checkout:
                default: true
                description: Checkout as a first step? Default is true
                type: boolean
            directory:
                default: .
                description: |
                    Path to the directory containing the Scala code to be scanned. Defaults to the current working directory
                type: string
            workspace-root:
                default: workspace
                description: |
                    Workspace root path that is either an absolute path or a path relative to the working directory
                type: string
        steps:
            - when:
                condition: <<parameters.checkout>>
                steps:
                    - checkout
            - when:
                condition: <<parameters.attach-workspace>>
                steps:
                    - attach_workspace:
                        at: <<parameters.workspace-root>>
            - scan_typescript:
                directory: <<parameters.directory>>
examples:
    scan_dockerfile_example:
        description: |
            Sample usage of scanning a Dockerfile.
        usage:
            version: "2.1"
            orbs:
                sast: ovotech/sast@1
            workflows:
                lint:
                    jobs:
                        - sast/scan_dockerfile:
                            dockerfile: circleci-orbs/sast/examples/Dockerfile
                            ignore-rules: DL4005,DL3008
                            trusted-registries: docker.io
    scan_python:
        description: |
            Sample usage of scanning Python source code using Semgrep
        usage:
            version: "2.1"
            orbs:
                sast: ovotech/sast@1
            workflows:
                lint:
                    jobs:
                        - sast/scan_python:
                            directory: ./src
    scan_scala:
        description: |
            Sample usage of scanning a Scala project.
        usage:
            version: "2.1"
            orbs:
                sast: ovotech/sast@1
            workflows:
                lint:
                    jobs:
                        - sast/scan_scala:
                            directory: ./src
    scan_terraform:
        description: |
            Sample usage of scanning Terraform files.
        usage:
            version: "2.1"
            orbs:
                sast: ovotech/sast@1
            workflows:
                example-workflow:
                    jobs:
                        - sast/scan_terraform:
                            directory: terraform/examples
    scan_typescript:
        description: |
            Sample usage of scanning TypeScript source code using Semgrep
        usage:
            version: "2.1"
            orbs:
                sast: ovotech/sast@1
            workflows:
                lint:
                    jobs:
                        - sast/scan_typescript:
                            directory: ./src

