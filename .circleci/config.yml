version: 2.1

# Reuse a common job for publishing each orb

jobs:
  validate_orbs:
    description: Validate orbs
    docker:
      - image: 361339499037.dkr.ecr.eu-west-1.amazonaws.com/pe-orbs:latest
    steps:
      - checkout
      - run:
          name: Validate orbs
          command: |
            set -e
            for file in **/orb.yml; do circleci orb validate $file; done

  publish_orb:
    description: Publish an orb
    parameters:
      path:
        type: string
        description: The path to the orb
    docker:
      - image: 361339499037.dkr.ecr.eu-west-1.amazonaws.com/pe-orbs:latest
    steps:
      - checkout
      - setup_remote_docker:
          version: 19.03.13
      - run:
          name: docker build << parameters.path >>
          # language=bash
          command: |
            set -x
            docker login --username $DOCKERHUB_USERNAME --password $DOCKERHUB_PASSWORD

            readonly ORB="<< parameters.path >>"

            for path in $ORB/executor/Dockerfile*; do

              if [ -e "$path" ]; then
                 echo "Has docker files - continuing"
              else
                 echo "Has no docker files - exiting step"
                 exit 0
              fi
              filename=$(basename $path)

              if [[ "$filename" == "Dockerfile" ]]; then
                  TAG="latest"
                  BUILD_TAG="$(date "+%d-%m-%Y")"
              else
                  TAG="${filename#"Dockerfile-"}"
                  BUILD_TAG="${TAG}_$(date "+%d-%m-%Y")"
              fi

              docker build --tag "ovotech/${ORB}:${BUILD_TAG}" \
              --label org.label-schema.vcs-ref="$CIRCLE_SHA1" \
              --label org.label-schema.vcs-url="$CIRCLE_REPOSITORY_URL" \
              --label org.label-schema.schema-version="1.0" \
              --file $path \
              "${ORB}/executor"

              docker push "ovotech/${ORB}:${BUILD_TAG}"

              DIGEST=$(docker image inspect --format="{{index .RepoDigests 0}}" "ovotech/${ORB}:${BUILD_TAG}")
              echo $DIGEST > "${ORB}_${TAG}_digest.txt"

              if [ "$CIRCLE_BRANCH" = "master" ]; then
                  docker tag "ovotech/${ORB}:${BUILD_TAG}" "ovotech/${ORB}:${TAG}"
                  docker push "ovotech/${ORB}:${TAG}"
              fi
            done
      - run:
          name: Publish << parameters.path >> orb
          # language=bash
          command: |
            readonly ORB="<< parameters.path >>"

            tools/include.py "${ORB}/orb.yml" > "/tmp/${ORB}_orb.yml"

            shopt -s nullglob   # allow orbs to have no dockerfile
            for path in $ORB/executor/Dockerfile*; do

              filename=$(basename $path)

              if [[ -f "$filename" ]]; then
                if [[ "$filename" == "Dockerfile" ]]; then
                    TAG="latest"
                else
                    TAG="${filename#"Dockerfile-"}"
                fi

                # update the executor image tag to point at the image that was just published
                DIGEST=$(<"${ORB}_${TAG}_digest.txt")
                sed -i -e "s|ovotech/${ORB}:$TAG|$DIGEST|" "/tmp/${ORB}_orb.yml"
              fi

            done

            DEV_VERSION=dev:$(echo $CIRCLE_BRANCH | tr / _)

            echo "Creating orb ovotech/${ORB} if it wasn't created before"
            circleci orb list ovotech | grep -q -F "ovotech/${ORB} " || circleci orb create ovotech/"${ORB}" --no-prompt --token "$CIRCLECI_PROD_TOKEN"

            echo "Publishing branch development-version: ovotech/${ORB}@$DEV_VERSION"
            circleci orb publish "/tmp/${ORB}_orb.yml" "ovotech/${ORB}@$DEV_VERSION" --token "$CIRCLECI_TOKEN"

            if [ "$CIRCLE_BRANCH" = "master" ]; then
              echo "Publishing master to ovotech/${ORB}"

              if ! circleci orb source "ovotech/${ORB}" > "/tmp/${ORB}_current.yml"; then
                # This is the first version
                circleci orb publish promote "ovotech/${ORB}@$DEV_VERSION" major --token "$CIRCLECI_PROD_TOKEN"
                exit 0
              fi

              if [[ -f "${ORB}/orb_version.txt" ]]; then
                # This is a specific version
                VERSION=$(<"${ORB}/orb_version.txt")
                CURRENT_VERSION=$(circleci orb info ovotech/${ORB} | grep "Latest" | cut -d' ' -f2)

                if [[ "$VERSION" != "$CURRENT_VERSION" ]]; then
                    circleci orb publish "/tmp/${ORB}_orb.yml" "$VERSION" --token "$CIRCLECI_PROD_TOKEN"
                else
                  echo "$VERSION is already published"
                fi

              elif ! cmp -s "/tmp/${ORB}_orb.yml" "/tmp/${ORB}_current.yml"; then
                # This is a new version
                circleci orb publish increment "/tmp/${ORB}_orb.yml" "ovotech/${ORB}" patch --token "$CIRCLECI_PROD_TOKEN"
              fi
            else
              echo "Orb can now be tested using the following circleci config"
              echo "  orbs:"
              echo "    ${ORB}: ovotech/${ORB}@dev:$CIRCLE_BRANCH"
            fi

workflows:
  commit:
    jobs:
      - validate_orbs
      - publish_orb:
          name: << matrix.path >>
          requires:
            - validate_orbs
          matrix:
            parameters:
              path:
                - aws-get-parameters
                - aws-rotate-keys
                - clair-scanner
                - rac-gcp-deploy
                - set-current-environment
                - terraform
                - tools-install
                - versioned-lambda
                - with-git-deploy-key
                - oot-eks
                - clojure
                - ssh-proxy
                - jaws-journey-deploy
                - oot-deploy
                - gcp-rotate-keys

