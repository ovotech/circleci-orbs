version: 2.1
description: "Defines the core steps required for a smart journey deployment pipeline"

orbs:
  aws-ecr: circleci/aws-ecr@6.3.0
  terraform: ovotech/terraform@1.6
  openjdk-install: cloudesire/openjdk-install@1.2.3
  snyk: snyk/snyk@0.0.10
  shipit: ovotech/shipit@1
  slack: circleci/slack@4.1.3

executors:
  kotlin:
    docker:
      - image: circleci/openjdk:11.0.7-jdk-buster
  python:
    docker:
      - image: circleci/python:3.8
  node:
    docker:
      - image: circleci/node:14.15.3

aliases:
  parameters:
    environment: &environment
      environment:
        type: "enum"
        enum: ["sandbox", "test", "nonprod", "prod"]
        default: "sandbox"
    serviceName: &serviceName
      serviceName:
        type: "string"

  tf-mask: &tf-mask
    TFMASK_CHAR: "#"
    TFMASK_RESOURCES_REGEX: "(?i)^(ovo_kafka_user|random_password|random_id|random_string).*$"
    TFMASK_VALUES_REGEX: "(?i)^.*(oauth|secret|token|password|key|result).*$"

  tf-common: &tf-common
    executor: terraform/terraform-0_12
    parameters:
      path:
        type: string
        default: ""
      attach_workspace:
        type: boolean
        default: false
      <<: *environment

  tf-parameters: &tf-parameters
    path: terraform/<< parameters.path >>
    backend_config_file: env/<< parameters.environment >>.tf
    var_file: << parameters.environment >>.tfvars
    label: << parameters.environment >>

  slack-notification: &slack-notification
    event: fail
    mentions: '@jaws-support'
    template: basic_fail_1

commands:
  avro:
    description: "Run commands for Avro check"
    parameters:
      uploadschema:
        type: boolean
        default: false
      <<: *environment
    steps:
      - run:
          name: "Run  Avro check commands"
          shell: /bin/bash -eo pipefail
          command: |
            include set_profile.sh
            include make_gradle_executable.sh
            include avro.sh

  integration-test:
    description: "Run integration tests"
    parameters:
      serviceName:
        type: string
      <<: *environment
    steps:
      - run:
          name: "Run integration test commands"
          shell: /bin/bash -eo pipefail
          command: |
            include set_profile.sh
            include make_gradle_executable.sh
            include run_integration_test.sh

  build-test:
    description: "Run build and test commands"
    parameters:
      serviceName:
        type: string
      skipUnitTests:
        type: boolean
        default: false
      <<: *environment
    steps:
      - run:
          name: "run build and test steps"
          shell: /bin/bash -eo pipefail
          command: |
            include set_profile.sh
            include make_gradle_executable.sh
            include build_project.sh

  build-test-lib:
    description: "Run build and test lib commands"
    parameters:
      lib:
        type: string
      <<: *environment
    steps:
      - run:
          name: "run build and test lib steps"
          shell: /bin/bash -eo pipefail
          command: |
            include set_profile.sh
            include make_gradle_executable.sh
            include build_lib.sh


  save-test-result:
    description: "Run commands to save test results"
    parameters:
      serviceName:
        type: string
      save_libs:
        type: boolean
        default: false
    steps:
      - run:
          name: "Save test results"
          shell: /bin/bash -eo pipefail
          command: |
            include save_test_results.sh
          when: always

  calculate-build-version:
    description: "Run commands to calculate build version"
    steps:
      - run:
          name: "Calculate build version"
          shell: /bin/bash -eo pipefail
          command: |
            include calculate_version.sh

  make-gradle-executable:
    description: "Run commands to make gradle executable"
    steps:
      - run:
          name: "make gradle executable"
          shell: /bin/bash -eo pipefail
          command: |
            include make_gradle_executable.sh

  run-automated-tests:
    description: "Run commands to make gradle executable"
    parameters:
      <<: *environment
    steps:
      - run:
          name: "make gradle executable"
          shell: /bin/bash -eo pipefail
          command: |
            include set_profile.sh
            include automated_test_run.sh

  save-automated-tests:
    description: "Run commands to make gradle executable"
    steps:
      - run:
          name: "make gradle executable"
          shell: /bin/bash -eo pipefail
          command: |
            include automated_test_save.sh

  report-code-coverage:
    description: "Add code coverage report"
    steps:
      - run:
          name: "Report code coverage"
          shell: /bin/bash -eo pipefail
          command: |
            include code_coverage.sh

  create-release:
    description: "Create release and changelog"
    steps:
      - run:
          command: |
            npx -p @semantic-release/changelog -p @semantic-release/git -p semantic-release semantic-release --debug=true --tag-format=\${version} --branches='master' --plugins='@semantic-release/commit-analyzer' '@semantic-release/release-notes-generator' '@semantic-release/changelog' '@semantic-release/git' '@semantic-release/github' --repositoryUrl="https://github.com/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}.git"
          name: Run semantic versioning

jobs:
  checkout-code:
    executor: kotlin
    working_directory: ~/working
    steps:
      - checkout
      - persist_to_workspace:
          root: .
          paths:
            - .

  avro:
    executor: kotlin
    working_directory: ~/working
    parameters:
      uploadschema:
        type: boolean
        default: false
      <<: *environment
    steps:
      - attach_workspace:
          at: ~/working
      - restore_cache:
          key: gradle-{{ checksum "build.gradle" }}
      - avro:
          uploadschema: << parameters.uploadschema >>
          environment: << parameters.environment >>
      - when:
          condition:
            equal: ["true", $SLACK_INTEGRATION_ENABLED]
          steps:
            - slack/notify:
                <<: *slack-notification

  lib-build-and-test:
    parameters:
      lib:
        description: lib to be built
        type: string
    executor: kotlin
    working_directory: ~/working
    steps:
      - attach_workspace:
          at: ~/working
      - restore_cache:
          key: gradle-{{ checksum "build.gradle" }}-{{ checksum "libs/<< parameters.lib >>/build.gradle" }}
      - build-test-lib:
          lib: << parameters.lib >>
      - save_cache:
          paths:
            - .gradle
            - ~/.gradle
          key: gradle-{{ checksum "build.gradle" }}-{{ checksum "libs/<< parameters.lib >>/build.gradle" }}
      - save-test-result:
          serviceName: << parameters.lib >>
          save_libs: true
      - store_test_results:
          path: ~/test-results
      - store_artifacts:
          path: ~/test-results/junit
      - store_artifacts:
          path: ./reports/jacoco
      - when:
          condition:
            equal: [ "true", $SLACK_INTEGRATION_ENABLED ]
          steps:
            - slack/notify:
                <<: *slack-notification

      - persist_to_workspace:
          root: .
          paths:
            - << parameters.lib >>/*
            - ./reports/jacoco/*


  build-and-test:
    parameters:
      <<: *serviceName
      <<: *environment
      publish:
        type: boolean
        default: false
      skipUnitTests:
        type: boolean
        default: false
    executor: kotlin
    working_directory: ~/working
    steps:
      - attach_workspace:
          at: ~/working
      - restore_cache:
          key: gradle-{{ checksum "build.gradle" }}-{{ checksum "<< parameters.serviceName >>/build.gradle" }}
      - build-test:
          serviceName: << parameters.serviceName >>
          environment: << parameters.environment >>
          skipUnitTests: << parameters.skipUnitTests >>
      - save_cache:
          paths:
            - .gradle
            - ~/.gradle
          key: gradle-{{ checksum "build.gradle" }}-{{ checksum "<< parameters.serviceName >>/build.gradle" }}
      - unless:
          condition: << parameters.skipUnitTests >>
          steps:
            - save-test-result:
                serviceName: << parameters.serviceName >>
                save_libs: false
            - store_test_results:
                path: ~/test-results
            - store_artifacts:
                path: ~/test-results/junit
            - store_artifacts:
                path: ~/reports/jacoco
      - when:
          condition: << parameters.publish >>
          steps:
            - aws-ecr/build-and-push-image:
                setup-remote-docker: true
                checkout: false
                account-url: AWS_ACCOUNT_URL
                aws-access-key-id: AWS_ACCESS_KEY_ID
                aws-secret-access-key: AWS_SECRET_ACCESS_KEY
                dockerfile: ./<< parameters.serviceName >>/Dockerfile
                path: ./<< parameters.serviceName >>
                create-repo: false
                region: AWS_DEFAULT_REGION
                repo: << parameters.serviceName >>
                tag: "latest,$CIRCLE_SHA1"
            - snyk/scan:
                docker-image-name: $AWS_ACCOUNT_URL/<< parameters.serviceName >>:latest
                fail-on-issues: true
                monitor-on-build: true
                project: << parameters.serviceName >>
                severity-threshold: high
                target-file: ./<< parameters.serviceName >>/Dockerfile
      - when:
          condition:
            equal: [ "true", $SLACK_INTEGRATION_ENABLED ]
          steps:
            - slack/notify:
                <<: *slack-notification

      - persist_to_workspace:
          root: .
          paths:
            - << parameters.serviceName >>/*
            - ./reports/jacoco/*

  integration-test:
    parameters:
      <<: *serviceName
      <<: *environment
      run_integration_tests:
        type: boolean
        default: true
    machine:
      docker_layer_caching: false
    working_directory: ~/working
    steps:
      - attach_workspace:
          at: ~/working
      - when:
          condition: << parameters.run_integration_tests >>
          steps:
            - openjdk-install/openjdk:
                version: 11
            - restore_cache:
                key: gradle-{{ checksum "build.gradle" }}-{{ checksum "<< parameters.serviceName >>/build.gradle" }}
            - integration-test:
                serviceName: << parameters.serviceName >>
                environment: << parameters.environment >>
            - store_test_results:
                path: << parameters.serviceName >>/build/test-results/integrationTest

      - when:
          condition:
            equal: [ "true", $SLACK_INTEGRATION_ENABLED ]
          steps:
            - slack/notify:
                <<: *slack-notification

  snyk-scan:
    executor: kotlin
    working_directory: ~/working
    steps:
      - attach_workspace:
          at: ~/working
      - make-gradle-executable
      - snyk/scan:
          additional-arguments: --all-sub-projects --configuration-attributes=buildtype:release,usage:java-runtime
          severity-threshold: high
      - when:
          condition:
            equal: [ "true", $SLACK_INTEGRATION_ENABLED ]
          steps:
            - slack/notify:
                <<: *slack-notification

  notify-shipit:
    executor: shipit/default
    steps:
      - shipit/shipit:
          team-name: Smart Journeys

  create-release:
    executor: node
    working_directory: ~/working
    steps:
      - attach_workspace:
          at: ~/working
      - create-release

  tf-plan:
    working_directory: ~/working
    <<: *tf-common
    description: tf-plan << parameters.environment >>
    environment:
      <<: *tf-mask
    steps:
      - when:
          condition: << parameters.attach_workspace >>
          steps:
            - attach_workspace:
                at: ~/working
      - unless:
          condition: << parameters.attach_workspace >>
          steps:
            - checkout
      - calculate-build-version
      - terraform/fmt-check:
          path: terraform/<< parameters.path >>
      - terraform/plan: *tf-parameters
      - when:
          condition:
            equal: [ "true", $SLACK_INTEGRATION_ENABLED ]
          steps:
            - slack/notify:
                <<: *slack-notification

  tf-apply:
    working_directory: ~/working
    <<: *tf-common
    description: tf-apply-<< parameters.environment >>
    environment:
      <<: *tf-mask
    steps:
      - when:
          condition: << parameters.attach_workspace >>
          steps:
            - attach_workspace:
                at: ~/working
      - unless:
          condition: << parameters.attach_workspace >>
          steps:
            - checkout
      - calculate-build-version
      - terraform/fmt-check:
          path: terraform/<< parameters.path >>
      - terraform/apply:
          auto_approve: true
          <<: *tf-parameters
      - when:
          condition:
            equal: [ "true", $SLACK_INTEGRATION_ENABLED ]
          steps:
            - slack/notify:
                <<: *slack-notification

  run-automation-test:
    parameters:
      <<: *environment
    executor: kotlin
    working_directory: ~/working
    steps:
      - attach_workspace:
          at: ~/working
      - make-gradle-executable
      - run-automated-tests:
          environment: << parameters.environment >>
      - save-automated-tests
      - store_test_results:
          path: ~/test-results
      - store_artifacts:
          path: ~/test-results/junit
      - when:
          condition:
            equal: [ "true", $SLACK_INTEGRATION_ENABLED ]
          steps:
            - slack/notify:
                <<: *slack-notification

  report-code-coverage:
    executor: python
    working_directory: ~/working
    steps:
      - attach_workspace:
          at: ~/working
      - report-code-coverage
      - store_artifacts:
          path: ./reports/jacoco
      - when:
          condition:
            equal: [ "true", $SLACK_INTEGRATION_ENABLED ]
          steps:
            - slack/notify:
                <<: *slack-notification
