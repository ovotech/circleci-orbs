version: 2.1
description: "Build utilities"

commands:
  clone:
    description: 'Clones the utilities repo into the current process'
    parameters:
      git_repo:
        description: "Git repository to clone"
        type: string
      local_folder:
        description: "Local folder path where the git repo will be cloned to"
        type: string
    steps:
      - run:
          name: Clone repo
          command: |
            mkdir << parameters.local_folder >>
            git clone << parameters.git_repo >> << parameters.local_folder >>
            chmod +x << parameters.local_folder >>/docker/build-image.sh
            chmod +x << parameters.local_folder >>/docker/publish-manifest.sh

  build:
    description: 'Executes the build utility script to build docker images in the targeted processor architecture'
    parameters:
      architecture: 
        description: "Targeted processor architecture (amd64, arm64) desired"
        type: string
      image_name:
        description: "Docker image name"
        type: string
      docker_registry:
        description: "Docker registry"
        type: string
      docker_file:
        description: "Docker file name + location"
        type: string
      clone_folder:
        description: "Clone build-script folder"
        type: string
        default: $HOME/utilities
      working_dir:
        description: "Working folder to build the image"
        type: string
      command_dir:
        description: "Path to directory where the command is executed"
        type: string
    steps:
      - checkout
      - clone:
          git_repo: https://github.com/ovotech/ohs-build-scripts.git
          local_folder: << parameters.clone_folder >>
      - run:
          name: Build image
          working_directory: << parameters.command_dir >>
          command: |
            $HOME/utilities/docker/build-image.sh \
                TARGET_ARCH=<< parameters.architecture >>\
                NUGET_USERNAME=$NUGET_USERNAME\
                NUGET_PASSWORD=$NUGET_PASSWORD\
                DOCKERFILE=<< parameters.docker_file >>\
                IMAGE_NAME=<< parameters.image_name >>\
                DOCKER_REGISTRY=<< parameters.docker_registry >>\
                WORKING_DIR=<< parameters.working_dir >>

  save-image:
    description: 'Saves container images to the circleci workspace'
    parameters:
      image_name: 
        description: "Docker image name to save"
        type: string
      path_name:
        description: "Path name where the image will be saved"
        type: string
      root_name:
        description: "Root folder name where the image will be saved"
        type: string
    steps:
      - run:
          name: Archive image
          command: |
            mkdir -p << parameters.root_name >>/<< parameters.path_name >>
            docker save -o << parameters.root_name >>/<< parameters.path_name >>/<< parameters.image_name >>.tar << parameters.image_name >>
      - persist_to_workspace:
          root: << parameters.root_name >>
          paths:
            - << parameters.path_name >>

  restore_images:
    description: 'Restores container images saved in the workspace to the current docker context'
    parameters:
      path_name:
        description: "Path name where the image will be loaded from"
        type: string
      root_name:
        description: "Root folder name where the image will be loaded from"
        type: string
    steps:
      - attach_workspace:
          at: << parameters.root_name >>
      - run:
          name: Load images into docker
          command: |
            for i in /<< parameters.root_name >>/<< parameters.path_name >>/*.tar; do
              docker load -i "$i"
            done 