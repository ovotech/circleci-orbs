version: 2.1
description: An orb to build scala services and deploy them to a Kubernetes cluster running on Google Cloud

aliases:
  # Once all projects are using sbt >=1.4.0 we can remove this as the plugin is now part of sbt
  - &sbt-dependency-graph echo 'addSbtPlugin("net.virtual-void" % "sbt-dependency-graph" % "0.10.0-RC1")' > project/sbt-dependency-graph.sbt

.gcloud_auth_uat: &gcloud_auth_uat
  gcloud-service-key: <<parameters.uat-gcloud-service-key>>
  project-id: <<parameters.uat-project-id>>
  google-compute-zone: <<parameters.google-compute-zone>>

.gcloud_auth_prd: &gcloud_auth_prd
  gcloud-service-key: <<parameters.prd-gcloud-service-key>>
  project-id: <<parameters.prd-project-id>>
  google-compute-zone: <<parameters.google-compute-zone>>

orbs:
  snyk: snyk/snyk@0.0.13

executors:
  machine:
    machine: true
  docker:
    docker:
      - image: ovotech/rac-gcp-deploy:latest

commands:
  persist_workspace:
    description: "Persist the workspace"
    parameters:
      to:
        description: "Path to persist the workspace to"
        type: string
    steps:
      - persist_to_workspace:
          root: <<parameters.to>>
          paths:
            - "*"

  restore_workspace:
    description: "Restore the saved workspace"
    parameters:
      to:
        description: "Path to restore the workspace to"
        type: string
    steps:
      - attach_workspace:
          at: <<parameters.to>>

  load_cache:
    description: "Restore cached dependencies"
    parameters:
      cache-suffix:
        description: "Suffix to use for the cache key, e.g. -v2, to be able to clear the cache"
        default: ""
        type: string
    steps:
      - restore_cache:
          keys:
            - '{{ .Environment.CIRCLE_PROJECT_REPONAME }}-{{ .Branch }}-{{ checksum "project/Dependencies.scala"}}<<parameters.cache-suffix>>'

  bintray_credentials:
    description: "Create Bintray credentials file"
    parameters:
      username:
        description: "Name of the environment variable storing the bintray username"
        type: env_var_name
      api-key:
        description: "Name of the environment variable storing the bintray api key"
        type: env_var_name
    steps:
      - run:
          name: "Create Bintray credentials file"
          command: echo "credentials += Credentials(\"Bintray\", \"dl.bintray.com\", \"$<<parameters.username>>\", \"$<<parameters.api-key>>\")" > credentials.sbt

  gcloud_auth:
    description: "Initialize the `gcloud` CLI"
    parameters:
      gcloud-service-key:
        description: "Name of environment variable storing the full service key JSON file for the Google project"
        type: env_var_name
      project-id:
        description: "Name of environment variable storing the Google project ID to connect with via the gcloud CLI"
        type: env_var_name
      google-compute-zone:
        description: "The Google compute zone to connect with via the gcloud CLI"
        type: string
    steps:
      - run:
          name: "Initilize the gcloud CLI"
          command: |
            echo $<<parameters.gcloud-service-key>> | base64 -d > account-auth.json
            gcloud auth activate-service-account --key-file account-auth.json
            gcloud config set project $<<parameters.project-id>>
            gcloud config set compute/zone <<parameters.google-compute-zone>>

  shipit_notification:
    description: "Send a notification to ShipIt"
    parameters:
      api-key:
        description: "Name of the environment variable storing the api key to access ShipIt"
        type: env_var_name
      team-name:
        description: "Name of the environment variable storing the team name"
        type: env_var_name
      git-username:
        description: "Name of the environment variable storing the git username"
        type: env_var_name
      shipit-url:
        description: "Name of the environment variable storing the url for shipit"
        type: env_var_name
    steps:
      - run:
          name: "Send a notification to ShipIt"
          command: |
            COMMIT_MESSAGE=$(git log --author=$<<parameters.git-username>> --invert-grep -1)
            curl https://${<<parameters.shipit-url>>}/deployments?apikey=${<<parameters.api-key>>} \
              -d "team=${<<parameters.team-name>>}" \
              -d "service=${CIRCLE_PROJECT_REPONAME}" \
              -d "buildId=${CIRCLE_BUILD_NUM}" \
              -d "links[0].title=CircleCI build" \
              -d "links[0].url=${CIRCLE_BUILD_URL}" \
              -d "links[1].title=Github" \
              -d "links[1].url=https://github.com/ovotech/${CIRCLE_PROJECT_REPONAME}/commit/${CIRCLE_SHA1}" \
              -d "note=${COMMIT_MESSAGE}"

  snyk_monitor:
    steps:
      - run: *sbt-dependency-graph
      - snyk/scan:
          project: $CIRCLE_PROJECT_REPONAME
          fail-on-issues: false
          monitor-on-build: true

jobs:
  compile:
    parameters:
      executor:
        description: "Name of executor to use for this job. Defaults to docker executor"
        type: executor
        default: docker
      workspace-dir:
        description: "Path to persist the workspace"
        type: string
        default: ~/project
      ssh-key-fingerprint:
        description: "The fingerprint of the ssh key with permissions to checkout"
        type: string
      bintray-username:
        description: "Name of the environment variable storing the bintray username"
        default: BINTRAY_USERNAME
        type: env_var_name
      bintray-api-key:
        description: "Name of the environment variable storing the bintray api key"
        default: BINTRAY_API_KEY
        type: env_var_name
      cache-suffix:
        description: "Suffix to use for the cache key, e.g. -v2, to be able to clear the cache"
        default: ""
        type: string
    executor: <<parameters.executor>>
    steps:
      - add_ssh_keys:
          fingerprints:
            - <<parameters.ssh-key-fingerprint>>
      - checkout
      - load_cache:
          cache-suffix: <<parameters.cache-suffix>>
      - bintray_credentials:
          username: <<parameters.bintray-username>>
          api-key: <<parameters.bintray-api-key>>
      - run:
          name: "Compile"
          command: sbt update compile test:compile evicted
      - run:
          name: "avoid unnecessary cache updates"
          command: |
            rm -fv ~/.ivy2/.sbt.ivy.lock
            find ~/.ivy2/cache -name "ivydata-*.properties" -print -delete
            find ~/.sbt -name "*.lock" -print -delete
      - save_cache:
          key: '{{ .Environment.CIRCLE_PROJECT_REPONAME }}-{{ .Branch }}-{{ checksum "project/Dependencies.scala"}}<<parameters.cache-suffix>>'
          paths:
            - ~/.m2
            - ~/.ivy2
            - ~/.sbt
            - ~/.embedpostgresql
            - ~/.cache/coursier

      - persist_workspace:
          to: <<parameters.workspace-dir>>

  compile_docs:
    parameters:
      executor:
        description: "Name of executor to use for this job. Defaults to docker executor"
        type: executor
        default: docker
      workspace-dir:
        description: "Path to persist the workspace"
        type: string
        default: ~/project
      cache-suffix:
        description: "Suffix to use for the cache key, e.g. -v2, to be able to clear the cache"
        default: ""
        type: string
    executor: <<parameters.executor>>
    steps:
      - restore_workspace:
          to: <<parameters.workspace-dir>>
      - load_cache:
          cache-suffix: <<parameters.cache-suffix>>
      - run:
          name: "Compile docs"
          command: sbt docs/compile
      - persist_workspace:
          to: <<parameters.workspace-dir>>

  unit_test:
    parameters:
      executor:
        description: "Name of executor to use for this job. Defaults to docker executor"
        type: executor
        default: docker
      workspace-dir:
        description: "Path to restore the workspace"
        type: string
        default: ~/project
      cache-suffix:
        description: "Suffix to use for the cache key, e.g. -v2, to be able to clear the cache"
        default: ""
        type: string
    executor: <<parameters.executor>>
    steps:
      - restore_workspace:
          to: <<parameters.workspace-dir>>
      - load_cache:
          cache-suffix: <<parameters.cache-suffix>>
      - run: sbt test:test

  service-tests-with-docker:
    parameters:
      executor:
        description: "Name of executor to use for this job. Defaults to machine executor"
        type: executor
        default: machine
      workspace-dir:
        description: "Path to restore the workspace"
        type: string
        default: ~/project
      cache-suffix:
        description: "Suffix to use for the cache key, e.g. -v2, to be able to clear the cache"
        default: ""
        type: string
    executor: <<parameters.executor>>
    steps:
      - attach_workspace:
          at: <<parameters.workspace-dir>>
      - load_cache:
          cache-suffix: <<parameters.cache-suffix>>
      - run:
          name: Update SBT launcher
          command: cd /tmp && curl  -L -O https://dl.bintray.com/sbt/debian/sbt-1.4.1.deb && sudo apt-get update; sudo dpkg -i  ./sbt-1.4.1.deb
      - run:
          name: "Configure dockerhub auth"
          command: |
            docker login -u "${OVO_DOCKERHUB_USER:?add ovo-internal-public context}" -p "${OVO_DOCKERHUB_PASSWORD:?add ovo-internal-public context}"
      - run:
          name: Service Tests
          command: sbt service-test:test
          no_output_timeout: 20m

  snyk_test:
    parameters:
      executor:
        description: "Name of executor to use for this job. Defaults to machine executor"
        type: executor
        default: docker
      workspace-dir:
        description: "Path to restore the workspace"
        type: string
        default: ~/project
      cache-suffix:
        description: "Suffix to use for the cache key, e.g. -v2, to be able to clear the cache"
        default: ""
        type: string
      enable-pr-comment:
        description: "Flag that enables/disables to add a comment on the PR with the result of Snyk test"
        default: false
        type: boolean
    executor: <<parameters.executor>>
    steps:
      - attach_workspace:
          at: <<parameters.workspace-dir>>
      - load_cache:
          cache-suffix: <<parameters.cache-suffix>>
      - run: *sbt-dependency-graph
      - when:
          condition: <<parameters.enable-pr-comment>>
          steps:
            - run:
                name: Post Snyk report to GitHub PR
                command: |
                  include github_comment_pr.sh
      - snyk/scan:
          project: $CIRCLE_PROJECT_REPONAME
          fail-on-issues: true
          monitor-on-build: false
          severity-threshold: high

  scalafmt:
    parameters:
      executor:
        description: "Name of executor to use for this job. Defaults to docker executor"
        type: executor
        default: docker
      workspace-dir:
        description: "Path to restore the workspace"
        type: string
        default: ~/project
      cache-suffix:
        description: "Suffix to use for the cache key, e.g. -v2, to be able to clear the cache"
        default: ""
        type: string
    executor: <<parameters.executor>>
    steps:
      - attach_workspace:
          at: <<parameters.workspace-dir>>
      - load_cache:
          cache-suffix: <<parameters.cache-suffix>>
      - run: sbt scalafmtCheckAll

  notify_shipit:
    parameters:
      executor:
        description: "Name of executor to use for this job. Defaults to docker executor"
        type: executor
        default: docker
      workspace-dir:
        description: "Path to restore the workspace"
        type: string
        default: ~/project
      shipit-api-key:
        description: "Name of the environment variable storing the api key to access ShipIt"
        type: env_var_name
        default: SHIPIT_API_KEY
      team-name:
        description: "Name of the environment variable storing the team name"
        type: env_var_name
        default: TEAM_NAME
      git-username:
        description: "Name of the environment variable storing the git username"
        type: env_var_name
        default: GIT_USERNAME
      shipit-url:
        description: "Name of the environment variable storing the url for shipit"
        type: env_var_name
        default: SHIPIT_URL
    executor: <<parameters.executor>>
    steps:
      - restore_workspace:
          to: <<parameters.workspace-dir>>
      - shipit_notification:
          api-key: <<parameters.shipit-api-key>>
          team-name: <<parameters.team-name>>
          git-username: <<parameters.git-username>>
          shipit-url: <<parameters.shipit-url>>

  release:
    parameters:
      executor:
        description: "Name of executor to use for this job. Defaults to docker executor"
        type: executor
        default: docker
      workspace-dir:
        description: "Path to restore/save the workspace"
        type: string
        default: ~/project
      git-username:
        description: "Name of the environment variable storing the github user to use when pushing commits"
        type: env_var_name
        default: GIT_USERNAME
      git_user_email:
        description: "Name of the environment variable storing the email of the github user to use when pushing commits"
        type: env_var_name
        default: GIT_USER_EMAIL
      ssh-key-fingerprint:
        description: "The fingerprint of the ssh key with permissions to checkout"
        type: string
      google-compute-zone:
        description: "The Google compute zone to connect with via the gcloud CLI. Defaults to europe-west1-b"
        type: string
        default: europe-west1-b
      container-name:
        description: "Name of environment variable storing the name of the container we are publishing"
        type: env_var_name
        default: CIRCLE_PROJECT_REPONAME
      registry-url:
        description: "The GCR registry URL. Defaults to eu.gcr.io"
        default: eu.gcr.io
        type: string
      uat-gcloud-service-key:
        description: "Name of environment variable storing the full service key JSON file for the UAT Google project"
        type: env_var_name
        default: UAT_GCLOUD_ACCOUNT_AUTH
      uat-project-id:
        description: "The UAT Google project ID to connect with via the gcloud CLI"
        type: env_var_name
        default: UAT_PROJECT_ID
      prd-gcloud-service-key:
        description: "Name of environment variable storing the full service key JSON file for the PRD Google project"
        type: env_var_name
        default: PRD_GCLOUD_ACCOUNT_AUTH
      prd-project-id:
        description: "Name of environment variable storing the PRD Google project ID to connect with via the gcloud CLI"
        type: env_var_name
        default: PRD_PROJECT_ID
      cache-suffix:
        description: "Suffix to use for the cache key, e.g. -v2, to be able to clear the cache"
        default: ""
        type: string
    executor: <<parameters.executor>>
    steps:
      - setup_remote_docker
      - restore_workspace:
          to: <<parameters.workspace-dir>>
      - load_cache:
          cache-suffix: <<parameters.cache-suffix>>
      - run:
          name: "Setup git config"
          command: |
            mkdir -p -m 0700 ~/.ssh/
            ssh-keyscan -t rsa github.com >> ~/.ssh/known_hosts
            git config --global user.name "$<<parameters.git-username>>"
            git config --global user.email "$<<parameters.git_user_email>>"
      - add_ssh_keys:
          fingerprints:
            - <<parameters.ssh-key-fingerprint>>
      - run:
          name: "Configure dockerhub auth"
          command: |
            docker login -u "${OVO_DOCKERHUB_USER:?add ovo-internal-public context}" -p "${OVO_DOCKERHUB_PASSWORD:?add ovo-internal-public context}"
      - run:
          name: "Release"
          command: sbt "release with-defaults"
      - run: |
          # sbt unconditionally builds image tagges as nonprod
          echo "export NONPROD_IMAGE_ROOT=<<parameters.registry-url>>/randc-nonprod/$<<parameters.container-name>>" >> "$BASH_ENV"
      - gcloud_auth: *gcloud_auth_uat
      - run:
          name: "Configure Docker to use gcloud as a credential helper"
          command: |
            mkdir -p "$HOME/.docker"
            gcloud auth configure-docker --quiet --project $<<parameters.uat-project-id>>
      - run:
          name: "Tag and push container to GCR UAT"
          command: |
            UAT_IMAGE_ROOT=<<parameters.registry-url>>/$<<parameters.uat-project-id>>/$<<parameters.container-name>>
            docker tag "${NONPROD_IMAGE_ROOT}:latest" "${UAT_IMAGE_ROOT}:latest"
            docker tag "${NONPROD_IMAGE_ROOT}:latest" "${UAT_IMAGE_ROOT}:$(cat version.txt)"
            docker push "${UAT_IMAGE_ROOT}"
      - gcloud_auth: *gcloud_auth_prd
      - run:
          name: "Configure Docker to use gcloud as a credential helper"
          command: |
            mkdir -p "$HOME/.docker"
            gcloud auth configure-docker --quiet --project $<<parameters.prd-project-id>>
      - run:
          name: "Tag and push container to GCR PRD"
          command: |
            PRD_IMAGE_ROOT=<<parameters.registry-url>>/$<<parameters.prd-project-id>>/$<<parameters.container-name>>
            docker tag "${NONPROD_IMAGE_ROOT}:latest" "${PRD_IMAGE_ROOT}:latest"
            docker tag "${NONPROD_IMAGE_ROOT}:$(cat version.txt)" "${PRD_IMAGE_ROOT}:$(cat version.txt)"
            docker push "${PRD_IMAGE_ROOT}"
      - snyk_monitor
      - persist_workspace:
          to: <<parameters.workspace-dir>>
