version: 2.1
description: An orb to build scala services and deploy them to a Kubernetes cluster running on Google Cloud

aliases:
  - &cache-key '{{ .Environment.CIRCLE_PROJECT_REPONAME }}-{{ .Branch }}-{{ checksum "project/Dependencies.scala"}}'

.gcloud_auth_uat: &gcloud_auth_uat
  gcloud-service-key: <<parameters.uat-gcloud-service-key>>
  project-id: <<parameters.uat-project-id>>
  google-compute-zone: <<parameters.google-compute-zone>>

.gcloud_auth_prd: &gcloud_auth_prd
  gcloud-service-key: <<parameters.prd-gcloud-service-key>>
  project-id: <<parameters.prd-project-id>>
  google-compute-zone: <<parameters.google-compute-zone>>

orbs:
  snyk: snyk/snyk@0.0.13
  aws-ecr: circleci/aws-ecr@7.2.0

executors:
  machine:
    machine:
      image: ubuntu-2004:202201-02
  docker:
    docker:
      - image: ovotech/rac-gcp-deploy:latest

commands:
  persist_workspace:
    description: "Persist the workspace"
    parameters:
      to:
        description: "Path to persist the workspace to"
        type: string
    steps:
      - persist_to_workspace:
          root: <<parameters.to>>
          paths:
            - "*"

  restore_workspace:
    description: "Restore the saved workspace"
    parameters:
      to:
        description: "Path to restore the workspace to"
        type: string
    steps:
      - attach_workspace:
          at: <<parameters.to>>

  load_cache:
    description: "Restore cached dependencies"
    parameters:
      cache-key:
        type: string
        default: *cache-key
      cache-suffix:
        description: "Suffix to use for the cache key, e.g. -v2, to be able to clear the cache"
        default: ""
        type: string
    steps:
      - restore_cache:
          keys:
            - <<parameters.cache-key>><<parameters.cache-suffix>>

  store_cache:
    parameters:
      cache-suffix:
        description: "Suffix to use for the cache key, e.g. -v2, to be able to clear the cache"
        default: ""
        type: string
      cache-key:
        type: string
        default: *cache-key
    description: "Save dependencies into cache"
    steps:
      - save_cache:
          key: <<parameters.cache-key>><<parameters.cache-suffix>>
          paths:
            - ~/.m2
            - ~/.ivy2
            - ~/.sbt
            - ~/.embedpostgresql
            - ~/.cache/coursier

  artifactory_credentials:
    description: "Create Artifactory credentials file"
    parameters:
      username:
        description: "Name of the environment variable storing artifactory username"
        default: ARTIFACTORY_USERNAME
        type: env_var_name
      api-key:
        description: "Name of the environment variable storing artifactory api key"
        default: ARTIFACTORY_API_KEY
        type: env_var_name
    steps:
      - run:
          name: "Create Artifactory credentials file"
          command: echo "credentials += Credentials(\"Artifactory Realm\", \"kaluza.jfrog.io\", \"$<<parameters.username>>\", \"$<<parameters.api-key>>\")" >> credentials.sbt

  gcloud_auth:
    description: "Initialize the `gcloud` CLI"
    parameters:
      gcloud-service-key:
        description: "Name of environment variable storing the full service key JSON file for the Google project"
        type: env_var_name
      project-id:
        description: "Name of environment variable storing the Google project ID to connect with via the gcloud CLI"
        type: env_var_name
      google-compute-zone:
        description: "The Google compute zone to connect with via the gcloud CLI"
        type: string
    steps:
      - run:
          name: "Initilize the gcloud CLI"
          command: |
            echo $<<parameters.gcloud-service-key>> | base64 -d > account-auth.json
            gcloud auth activate-service-account --key-file account-auth.json
            gcloud config set project $<<parameters.project-id>>
            gcloud config set compute/zone <<parameters.google-compute-zone>>

  shipit_notification:
    description: "Send a notification to ShipIt"
    parameters:
      api-key:
        description: "Name of the environment variable storing the api key to access ShipIt"
        type: env_var_name
      team-name:
        description: "Name of the environment variable storing the team name"
        type: env_var_name
      git-username:
        description: "Name of the environment variable storing the git username"
        type: env_var_name
      shipit-url:
        description: "Name of the environment variable storing the url for shipit"
        type: env_var_name
    steps:
      - run:
          name: "Send a notification to ShipIt"
          command: |
            COMMIT_MESSAGE=$(git log --author=$<<parameters.git-username>> --invert-grep -1)
            curl https://${<<parameters.shipit-url>>}/deployments?apikey=${<<parameters.api-key>>} \
              -d "team=${<<parameters.team-name>>}" \
              -d "service=${CIRCLE_PROJECT_REPONAME}" \
              -d "buildId=${CIRCLE_BUILD_NUM}" \
              -d "links[0].title=CircleCI build" \
              -d "links[0].url=${CIRCLE_BUILD_URL}" \
              -d "links[1].title=Github" \
              -d "links[1].url=https://github.com/ovotech/${CIRCLE_PROJECT_REPONAME}/commit/${CIRCLE_SHA1}" \
              -d "note=${COMMIT_MESSAGE}"

  snyk_monitor:
    steps:
      - snyk/scan:
          project: $CIRCLE_PROJECT_REPONAME
          fail-on-issues: false
          monitor-on-build: true

  snyk_scan_image:
    description: "Scan docker image with Snyk"
    parameters:
      docker-image-name:
        description: "Fully qualified name & tag of the image to scan"
        type: string
      snyk-project-name:
        description: "Name of the target Snyk project"
        type: string
    steps:
      - snyk/scan:
          # Do not fail builds while we bed this command in - but note that it may be enforced at some point.
          # Kaluza policy states that monitor-on-build must be set to true, but currently this is likely to
          # result in a duplicate Snyk project for the image, as our Kubernetes integration uses a project
          # name that incorporates the namespace & object type (and so is likely to differ from snyk-project-name).
          docker-image-name: <<parameters.docker-image-name>>
          fail-on-issues: false
          severity-threshold: high
          monitor-on-build: false
          project: <<parameters.snyk-project-name>>

jobs:
  compile:
    parameters:
      executor:
        description: "Name of executor to use for this job. Defaults to docker executor"
        type: executor
        default: docker
      workspace-dir:
        description: "Path to persist the workspace"
        type: string
        default: ~/project
      ssh-key-fingerprint:
        description: "The fingerprint of the ssh key with permissions to checkout"
        type: string
      artifactory-username:
        description: "Name of the environment variable storing the artifactory username"
        default: ARTIFACTORY_USERNAME
        type: env_var_name
      artifactory-api-key:
        description: "Name of the environment variable storing the artifactory api key"
        default: ARTIFACTORY_API_KEY
        type: env_var_name
      cache-key:
        type: string
        default: *cache-key
      cache-suffix:
        description: "Suffix to use for the cache key, e.g. -v2, to be able to clear the cache"
        default: ""
        type: string
      sbt-extra-options:
        description: "Extra options being passed to sbt, like '-mem 2048'"
        default: ""
        type: string
    executor: <<parameters.executor>>
    steps:
      - add_ssh_keys:
          fingerprints:
            - <<parameters.ssh-key-fingerprint>>
      - checkout
      - load_cache:
          cache-key: <<parameters.cache-key>>
          cache-suffix: <<parameters.cache-suffix>>
      - artifactory_credentials:
          username: <<parameters.artifactory-username>>
          api-key: <<parameters.artifactory-api-key>>
      - run:
          name: "Compile"
          command: sbt -v +update +compile +test:compile +evicted <<parameters.sbt-extra-options>>
      - run:
          name: "avoid unnecessary cache updates"
          command: |
            rm -fv ~/.ivy2/.sbt.ivy.lock
            find ~/.ivy2/cache -name "ivydata-*.properties" -print -delete
            find ~/.sbt -name "*.lock" -print -delete
      - store_cache:
          cache-key: <<parameters.cache-key>>
          cache-suffix: <<parameters.cache-suffix>>
      - persist_workspace:
          to: <<parameters.workspace-dir>>

  compile_docs:
    parameters:
      executor:
        description: "Name of executor to use for this job. Defaults to docker executor"
        type: executor
        default: docker
      workspace-dir:
        description: "Path to persist the workspace"
        type: string
        default: ~/project
      cache-key:
        type: string
        default: *cache-key
      cache-suffix:
        description: "Suffix to use for the cache key, e.g. -v2, to be able to clear the cache"
        default: ""
        type: string
      sbt-extra-options:
        description: "Extra options being passed to sbt, like '-mem 2048'"
        default: ""
        type: string
    executor: <<parameters.executor>>
    steps:
      - restore_workspace:
          to: <<parameters.workspace-dir>>
      - load_cache:
          cache-key: <<parameters.cache-key>>
          cache-suffix: <<parameters.cache-suffix>>
      - run:
          name: "Compile docs"
          command: sbt -v docs/compile <<parameters.sbt-extra-options>>
      - persist_workspace:
          to: <<parameters.workspace-dir>>

  unit_test:
    parameters:
      executor:
        description: "Name of executor to use for this job. Defaults to docker executor"
        type: executor
        default: docker
      workspace-dir:
        description: "Path to restore the workspace"
        type: string
        default: ~/project
      cache-key:
        type: string
        default: *cache-key
      cache-suffix:
        description: "Suffix to use for the cache key, e.g. -v2, to be able to clear the cache"
        default: ""
        type: string
      sbt-extra-options:
        description: "Extra options being passed to sbt, like '-mem 2048'"
        default: ""
        type: string
    executor: <<parameters.executor>>
    steps:
      - restore_workspace:
          to: <<parameters.workspace-dir>>
      - load_cache:
          cache-key: <<parameters.cache-key>>
          cache-suffix: <<parameters.cache-suffix>>
      - run: sbt -v +test:test <<parameters.sbt-extra-options>>

  service-tests-with-docker:
    parameters:
      executor:
        description: "Name of executor to use for this job. Defaults to machine executor"
        type: executor
        default: machine
      workspace-dir:
        description: "Path to restore the workspace"
        type: string
        default: ~/project
      cache-key:
        type: string
        default: *cache-key
      cache-suffix:
        description: "Suffix to use for the cache key, e.g. -v2, to be able to clear the cache"
        default: ""
        type: string
      sbt-extra-options:
        description: "Extra options being passed to sbt, like '-mem 2048'"
        default: ""
        type: string
    executor: <<parameters.executor>>
    steps:
      - attach_workspace:
          at: <<parameters.workspace-dir>>
      - load_cache:
          cache-key: <<parameters.cache-key>>
          cache-suffix: <<parameters.cache-suffix>>
      - run:
          name: Update SBT launcher
          command: cd /tmp && curl  -L -O https://repo.scala-sbt.org/scalasbt/debian/sbt-1.5.1.deb && sudo apt-get update; sudo dpkg -i  ./sbt-1.5.1.deb
      - run:
          name: "Configure dockerhub auth"
          command: |
            docker login -u "${OVO_DOCKERHUB_USER:?add ovo-internal-public context}" -p "${OVO_DOCKERHUB_PASSWORD:?add ovo-internal-public context}"
      - run:
          name: Service Tests
          command: sbt -v service-test:test <<parameters.sbt-extra-options>>
          no_output_timeout: 20m

  snyk_test:
    parameters:
      executor:
        description: "Name of executor to use for this job. Defaults to machine executor"
        type: executor
        default: docker
      workspace-dir:
        description: "Path to restore the workspace"
        type: string
        default: ~/project
      cache-key:
        type: string
        default: *cache-key
      cache-suffix:
        description: "Suffix to use for the cache key, e.g. -v2, to be able to clear the cache"
        default: ""
        type: string
      enable-pr-comment:
        description: "Flag that enables/disables to add a comment on the PR with the result of Snyk test"
        default: false
        type: boolean
    executor: <<parameters.executor>>
    steps:
      - attach_workspace:
          at: <<parameters.workspace-dir>>
      - load_cache:
          cache-key: <<parameters.cache-key>>
          cache-suffix: <<parameters.cache-suffix>>
      - when:
          condition: <<parameters.enable-pr-comment>>
          steps:
            - run:
                name: Post Snyk report to GitHub PR
                command: |
                  include github_comment_pr.sh
      - snyk/scan:
          project: $CIRCLE_PROJECT_REPONAME
          fail-on-issues: true
          monitor-on-build: false
          severity-threshold: high

  scalafmt:
    parameters:
      executor:
        description: "Name of executor to use for this job. Defaults to docker executor"
        type: executor
        default: docker
      workspace-dir:
        description: "Path to restore the workspace"
        type: string
        default: ~/project
      cache-key:
        type: string
        default: *cache-key
      cache-suffix:
        description: "Suffix to use for the cache key, e.g. -v2, to be able to clear the cache"
        default: ""
        type: string
      sbt-extra-options:
        description: "Extra options being passed to sbt, like '-mem 2048'"
        default: ""
        type: string
    executor: <<parameters.executor>>
    steps:
      - attach_workspace:
          at: <<parameters.workspace-dir>>
      - load_cache:
          cache-key: <<parameters.cache-key>>
          cache-suffix: <<parameters.cache-suffix>>
      - run: sbt -v scalafmtCheckAll  <<parameters.sbt-extra-options>>

  notify_shipit:
    parameters:
      executor:
        description: "Name of executor to use for this job. Defaults to docker executor"
        type: executor
        default: docker
      workspace-dir:
        description: "Path to restore the workspace"
        type: string
        default: ~/project
      shipit-api-key:
        description: "Name of the environment variable storing the api key to access ShipIt"
        type: env_var_name
        default: SHIPIT_API_KEY
      team-name:
        description: "Name of the environment variable storing the team name"
        type: env_var_name
        default: TEAM_NAME
      git-username:
        description: "Name of the environment variable storing the git username"
        type: env_var_name
        default: GIT_USERNAME
      shipit-url:
        description: "Name of the environment variable storing the url for shipit"
        type: env_var_name
        default: SHIPIT_URL
    executor: <<parameters.executor>>
    steps:
      - restore_workspace:
          to: <<parameters.workspace-dir>>
      - shipit_notification:
          api-key: <<parameters.shipit-api-key>>
          team-name: <<parameters.team-name>>
          git-username: <<parameters.git-username>>
          shipit-url: <<parameters.shipit-url>>

  release:
    parameters:
      executor:
        description: "Name of executor to use for this job. Defaults to docker executor"
        type: executor
        default: docker
      workspace-dir:
        description: "Path to restore/save the workspace"
        type: string
        default: ~/project
      git-username:
        description: "Name of the environment variable storing the github user to use when pushing commits"
        type: env_var_name
        default: GIT_USERNAME
      git-user-email:
        description: "Name of the environment variable storing the email of the github user to use when pushing commits"
        type: env_var_name
        default: GIT_USER_EMAIL
      ssh-key-fingerprint:
        description: "The fingerprint of the ssh key with permissions to checkout"
        type: string
      google-compute-zone:
        description: "The Google compute zone to connect with via the gcloud CLI. Defaults to europe-west1-b"
        type: string
        default: europe-west1-b
      container-name:
        description: "Name of environment variable storing the name of the container we are publishing"
        type: env_var_name
        default: CIRCLE_PROJECT_REPONAME
      registry-url:
        description: "The GCR registry URL. Defaults to eu.gcr.io"
        default: eu.gcr.io
        type: string
      uat-gcloud-service-key:
        description: "Name of environment variable storing the full service key JSON file for the UAT Google project"
        type: env_var_name
        default: UAT_GCLOUD_ACCOUNT_AUTH
      uat-project-id:
        description: "The UAT Google project ID to connect with via the gcloud CLI"
        type: env_var_name
        default: UAT_PROJECT_ID
      prd-gcloud-service-key:
        description: "Name of environment variable storing the full service key JSON file for the PRD Google project"
        type: env_var_name
        default: PRD_GCLOUD_ACCOUNT_AUTH
      prd-project-id:
        description: "Name of environment variable storing the PRD Google project ID to connect with via the gcloud CLI"
        type: env_var_name
        default: PRD_PROJECT_ID
      cache-key:
        type: string
        default: *cache-key
      cache-suffix:
        description: "Suffix to use for the cache key, e.g. -v2, to be able to clear the cache"
        default: ""
        type: string
      sbt-extra-options:
        description: "Extra options being passed to sbt, like '-mem 2048'"
        default: ""
        type: string
    executor: <<parameters.executor>>
    steps:
      - setup_remote_docker
      - restore_workspace:
          to: <<parameters.workspace-dir>>
      - load_cache:
          cache-key: <<parameters.cache-key>>
          cache-suffix: <<parameters.cache-suffix>>
      - run:
          name: "Setup git config"
          command: |
            mkdir -p -m 0700 ~/.ssh/
            ssh-keyscan -t rsa github.com >> ~/.ssh/known_hosts
            git config --global user.name "$<<parameters.git-username>>"
            git config --global user.email "$<<parameters.git-user-email>>"
      - add_ssh_keys:
          fingerprints:
            - <<parameters.ssh-key-fingerprint>>
      - run:
          name: "Configure dockerhub auth"
          command: |
            docker login -u "${OVO_DOCKERHUB_USER:?add ovo-internal-public context}" -p "${OVO_DOCKERHUB_PASSWORD:?add ovo-internal-public context}"
      - run:
          name: "Release"
          command: sbt -v "release with-defaults" <<parameters.sbt-extra-options>>
      - run: |
          # sbt unconditionally builds image tagged as nonprod
          echo "export NONPROD_IMAGE_ROOT=<<parameters.registry-url>>/randc-nonprod/$<<parameters.container-name>>" >> "$BASH_ENV"
      - gcloud_auth: *gcloud_auth_uat
      - run:
          name: "Configure Docker to use gcloud as a credential helper"
          command: |
            mkdir -p "$HOME/.docker"
            gcloud auth configure-docker --quiet --project $<<parameters.uat-project-id>>
      - run:
          name: "Tag container for GCR UAT"
          command: |
            UAT_IMAGE_ROOT=<<parameters.registry-url>>/$<<parameters.uat-project-id>>/$<<parameters.container-name>>
            docker tag "${NONPROD_IMAGE_ROOT}:latest" "${UAT_IMAGE_ROOT}:latest"
            docker tag "${NONPROD_IMAGE_ROOT}:latest" "${UAT_IMAGE_ROOT}:$(cat version.txt)"
            echo "export UAT_IMAGE_ROOT=${UAT_IMAGE_ROOT}" >> "$BASH_ENV"
      - snyk_scan_image:
          # use the GCR tag for the image scan (in case monitor-on-build is set to true in future)
          # may fail build upon detection of vulnerabilities (once configured to do so)
          docker-image-name: "${UAT_IMAGE_ROOT}:latest"
          snyk-project-name: $<<parameters.container-name>>
      - run:
          name: "Push container to GCR UAT"
          command: docker push "${UAT_IMAGE_ROOT}"
      - gcloud_auth: *gcloud_auth_prd
      - run:
          name: "Configure Docker to use gcloud as a credential helper"
          command: |
            mkdir -p "$HOME/.docker"
            gcloud auth configure-docker --quiet --project $<<parameters.prd-project-id>>
      - run:
          name: "Tag and push container to GCR PRD"
          command: |
            PRD_IMAGE_ROOT=<<parameters.registry-url>>/$<<parameters.prd-project-id>>/$<<parameters.container-name>>
            docker tag "${NONPROD_IMAGE_ROOT}:latest" "${PRD_IMAGE_ROOT}:latest"
            docker tag "${NONPROD_IMAGE_ROOT}:$(cat version.txt)" "${PRD_IMAGE_ROOT}:$(cat version.txt)"
            docker push "${PRD_IMAGE_ROOT}"
      - snyk_monitor
      - persist_workspace:
          to: <<parameters.workspace-dir>>

  build_and_release_version:
    parameters:
      executor:
        description: "Name of executor to use for this job. Defaults to docker executor"
        type: executor
        default: docker
      workspace-dir:
        description: "Path to restore/save the workspace"
        type: string
        default: ~/project
      container-name:
        description: "Name of environment variable storing the name of the container we are publishing"
        type: env_var_name
        default: CIRCLE_PROJECT_REPONAME
      registry-url:
        description: "The GCR registry URL. Defaults to eu.gcr.io"
        default: eu.gcr.io
        type: string
      git-username:
        description: "Name of the environment variable storing the github user to use when pushing commits"
        type: env_var_name
        default: GIT_USERNAME
      git-user-email:
        description: "Name of the environment variable storing the email of the github user to use when pushing commits"
        type: env_var_name
        default: GIT_USER_EMAIL
      ssh-key-fingerprint:
        description: "The fingerprint of the ssh key with permissions to checkout"
        type: string
      cache-key:
        type: string
        default: *cache-key
      cache-suffix:
        description: "Suffix to use for the cache key, e.g. -v2, to be able to clear the cache"
        default: ""
        type: string
      sbt-extra-options:
        description: "Extra options being passed to sbt, like '-mem 2048'"
        default: ""
        type: string
    executor: <<parameters.executor>>
    steps:
      - setup_remote_docker
      - restore_workspace:
          to: <<parameters.workspace-dir>>
      - load_cache:
          cache-key: <<parameters.cache-key>>
          cache-suffix: <<parameters.cache-suffix>>
      - run:
          name: "Setup git config"
          command: |
            mkdir -p -m 0700 ~/.ssh/
            ssh-keyscan -t rsa github.com >> ~/.ssh/known_hosts
            git config --global user.name "$<<parameters.git-username>>"
            git config --global user.email "$<<parameters.git-user-email>>"
      - add_ssh_keys:
          fingerprints:
            - <<parameters.ssh-key-fingerprint>>
      - run:
          name: "Build Docker image and release a new version"
          command: sbt -v "release with-defaults" <<parameters.sbt-extra-options>>
      - run:
          name: "Store Docker image in a file"
          command: |
            # sbt unconditionally builds image tagged as nonprod
            docker save -o <<parameters.workspace-dir>>/$<<parameters.container-name>>.dockerimage <<parameters.registry-url>>/randc-nonprod/$<<parameters.container-name>>
      - snyk_monitor
      - persist_workspace:
          to: <<parameters.workspace-dir>>

  push_kmi_docker_image:
    parameters:
      workspace-dir:
        description: "Path to restore/save the workspace"
        type: string
        default: ~/project
      container-name:
        description: "Name of environment variable storing the name of the container we are publishing"
        type: env_var_name
        default: CIRCLE_PROJECT_REPONAME
      gcr-registry-url:
        description: "The GCR registry URL. Defaults to eu.gcr.io"
        default: eu.gcr.io
        type: string
      kmi-registry-url:
        description: "The URL of the centralised ECR registry"
        type: env_var_name
        default: AWS_ECR_ACCOUNT_URL
      kmi-namespace:
        description: "The KMI namespace this container is deployed into. Defaults to the container name"
        type: env_var_name
        default: CIRCLE_PROJECT_REPONAME
    docker:
      - image: cimg/openjdk:11.0.13 # Supports the AWS CLI
    steps:
      - setup_remote_docker
      - restore_workspace:
          to: <<parameters.workspace-dir>>
      - run:
          name: "Load docker image from file and tag"
          command: |
            export NONPROD_IMAGE_ROOT=<<parameters.gcr-registry-url>>/randc-nonprod/$<<parameters.container-name>>
            docker load -i <<parameters.workspace-dir>>/$<<parameters.container-name>>.dockerimage
            docker tag "${NONPROD_IMAGE_ROOT}:$(cat version.txt)" $<<parameters.kmi-registry-url>>/$<<parameters.kmi-namespace>>/$<<parameters.container-name>>:$(cat version.txt)
      - aws-ecr/ecr-login
      - run:
          name: "Push docker image to KMI registry"
          command: |
            docker push $<<parameters.kmi-registry-url>>/$<<parameters.kmi-namespace>>/$<<parameters.container-name>>:$(cat version.txt)

  push_docker_image:
    parameters:
      executor:
        description: "Name of executor to use for this job. Defaults to docker executor"
        type: executor
        default: docker
      workspace-dir:
        description: "Path to restore/save the workspace"
        type: string
        default: ~/project
      google-compute-zone:
        description: "The Google compute zone to connect with via the gcloud CLI. Defaults to europe-west1-b"
        type: string
        default: europe-west1-b
      container-name:
        description: "Name of environment variable storing the name of the container we are publishing"
        type: env_var_name
        default: CIRCLE_PROJECT_REPONAME
      registry-url:
        description: "The GCR registry URL. Defaults to eu.gcr.io"
        default: eu.gcr.io
        type: string
      gcp-project-id:
        description: "The GCP project ID to connect with via the gcloud CLI"
        type: env_var_name
        default: GCP_PROJECT_ID
      gcloud-service-key:
        description: "Name of environment variable storing the full service key JSON file for the GCP project"
        type: env_var_name
        default: GCLOUD_ACCOUNT_AUTH
      cache-key:
        type: string
        default: *cache-key
      cache-suffix:
        description: "Suffix to use for the cache key, e.g. -v2, to be able to clear the cache"
        default: ""
        type: string
    executor: <<parameters.executor>>
    steps:
      - setup_remote_docker
      - restore_workspace:
          to: <<parameters.workspace-dir>>
      - load_cache:
          cache-key: <<parameters.cache-key>>
          cache-suffix: <<parameters.cache-suffix>>
      - run:
          name: "Configure dockerhub auth"
          command: |
            docker login -u "${OVO_DOCKERHUB_USER:?add ovo-internal-public context}" -p "${OVO_DOCKERHUB_PASSWORD:?add ovo-internal-public context}"
      - run:
          name: "Load Docker image from a file"
          command: |
            docker load -i <<parameters.workspace-dir>>/$<<parameters.container-name>>.dockerimage
      - gcloud_auth:
          gcloud-service-key: <<parameters.gcloud-service-key>>
          project-id: <<parameters.gcp-project-id>>
          google-compute-zone: <<parameters.google-compute-zone>>
      - run:
          name: "Configure Docker to use gcloud as a credential helper"
          command: |
            mkdir -p "$HOME/.docker"
            gcloud auth configure-docker --quiet --project $<<parameters.gcp-project-id>>
      - run:
          name: "Tag container for GCR"
          command: |
            export NONPROD_IMAGE_ROOT=<<parameters.registry-url>>/randc-nonprod/$<<parameters.container-name>>
            IMAGE_ROOT=<<parameters.registry-url>>/$<<parameters.gcp-project-id>>/$<<parameters.container-name>>
            docker tag "${NONPROD_IMAGE_ROOT}:latest" "${IMAGE_ROOT}:latest"
            docker tag "${NONPROD_IMAGE_ROOT}:$(cat version.txt)" "${IMAGE_ROOT}:$(cat version.txt)"
      - snyk_scan_image:
          # use the GCR tag for the image scan (in case monitor-on-build is set to true in future)
          # may fail build upon detection of vulnerabilities (once configured to do so)
          docker-image-name: <<parameters.registry-url>>/$<<parameters.gcp-project-id>>/$<<parameters.container-name>>:latest
          snyk-project-name: $<<parameters.container-name>>
      - run:
          name: "Push container to GCR"
          command: |
            IMAGE_ROOT=<<parameters.registry-url>>/$<<parameters.gcp-project-id>>/$<<parameters.container-name>>
            docker push "${IMAGE_ROOT}"

  deploy_to_kmi:
    parameters:
      workspace-dir:
        description: "Path to restore/save the workspace"
        type: string
        default: ~/project
      container-name:
        description: "Name of environment variable storing the name of the container we are publishing"
        type: env_var_name
        default: CIRCLE_PROJECT_REPONAME
      kmi-env:
        description: "The environment of KMI to deploy to"
        type: string
        default: uat
      git-username:
        description: "Name of the environment variable storing the github user to use when pushing commits"
        type: env_var_name
        default: GIT_USERNAME
      git-user-email:
        description: "Name of the environment variable storing the email of the github user to use when pushing commits"
        type: env_var_name
        default: GIT_USER_EMAIL
    docker:
      - image: cimg/base:stable
    steps:
      - restore_workspace:
          to: <<parameters.workspace-dir>>
      - run:
          name: Clone gitops repo
          command: |
            rm -rf ~/gitops
            git clone https://$GITHUB_TOKEN@github.com/ovotech/rac-kmi-gitops ~/gitops
      - run:
          name: Patch deployment
          command: |
            cd ~/gitops/$<<parameters.container-name>>
            yq e ".version=\"$(cat <<parameters.workspace-dir>>/version.txt)\"" -i values-<<parameters.kmi-env>>-shared.yaml
      - run:
          name: Commit and push
          command: |
            cd  ~/gitops
            git config user.email "$<<parameters.git-user-email>>"
            git config user.name "$<<parameters.git-username>>"
            git add .
            if [ -z "$(git status --porcelain)" ]; then
              echo "No changes detected."
            else
              git commit -m "Bumping $<<parameters.container-name>> image tag to $(cat <<parameters.workspace-dir>>/version.txt) for <<parameters.kmi-env>>"
              git push origin main
            fi

  release_library:
    parameters:
      executor:
        description: "Name of executor to use for this job. Defaults to machine executor"
        type: executor
        default: machine
      workspace-dir:
        description: "Path to restore/save the workspace"
        type: string
        default: ~/project
      git-username:
        description: "Name of the environment variable storing the github user to use when pushing commits"
        type: env_var_name
        default: GIT_USERNAME
      git-user-email:
        description: "Name of the environment variable storing the email of the github user to use when pushing commits"
        type: env_var_name
        default: GIT_USER_EMAIL
      ssh-key-fingerprint:
        description: "The fingerprint of the ssh key with permissions to checkout"
        type: string
      cache-key:
        type: string
        default: *cache-key
      cache-suffix:
        description: "Suffix to use for the cache key, e.g. -v2, to be able to clear the cache"
        default: ""
        type: string
      sbt-extra-options:
        description: "Extra options being passed to sbt, like '-mem 2048'"
        default: ""
        type: string
      artifactory-username:
        description: "Name of the environment variable storing the artifactory username"
        default: ARTIFACTORY_USERNAME
        type: env_var_name
      artifactory-api-key:
        description: "Name of the environment variable storing the artifactory api key"
        default: ARTIFACTORY_API_KEY
        type: env_var_name
    executor: <<parameters.executor>>
    steps:
      - restore_workspace:
          to: <<parameters.workspace-dir>>
      - load_cache:
          cache-key: <<parameters.cache-key>>
          cache-suffix: <<parameters.cache-suffix>>
      - run:
          name: "Setup git config"
          command: |
            mkdir -p -m 0700 ~/.ssh/
            ssh-keyscan -t rsa github.com >> ~/.ssh/known_hosts
            git config --global user.name "$<<parameters.git-username>>"
            git config --global user.email "$<<parameters.git-user-email>>"
      - add_ssh_keys:
          fingerprints:
            - <<parameters.ssh-key-fingerprint>>
      - artifactory_credentials:
          username: <<parameters.artifactory-username>>
          api-key: <<parameters.artifactory-api-key>>
      - run:
          name: "Release"
          command: sbt -v "release with-defaults" <<parameters.sbt-extra-options>>
      - snyk_monitor
