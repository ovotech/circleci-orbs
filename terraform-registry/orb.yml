version: 2.1
description: |
    Publish Terraform Cloud artefacts to a private registry
display:
    home_url: https://github.com/ovotech/team-cppe/blob/main/circleci-orbs/terraform-registry/README.md
    source_url: https://github.com/ovotech/team-cppe
commands:
    module-version-check:
        description: |
            Determines if a module version has not already been published
        parameters:
            module-name:
                description: |
                    The module name
                type: string
            module-version:
                description: |
                    The module version number to check
                type: string
            provider-name:
                description: |
                    The name of the module provider
                type: string
            token:
                description: |
                    The API token to be used to access Terraform Cloud
                type: string
        steps:
            - run:
                command: "#!/bin/bash\nset -euo pipefail\n\nreadonly ORGANISATION_NAME=\"ovotech\"\nreadonly API_BASE_PATH=\"https://app.terraform.io/api\"\n\n# shellcheck source=/dev/null\nsource \"circleci-orbs/terraform-registry/scripts/common.sh\"\n\ncan_publish_module_version() {\n    assert_non_empty PARAM_TERRAFORM_TOKEN || exit 2\n    assert_non_empty PARAM_MODULE_NAME || exit 2\n    assert_non_empty PARAM_PROVIDER_NAME || exit 2\n    assert_non_empty PARAM_MODULE_VERSION || exit 2\n    \n    assert_dependency jq || exit 2\n    assert_dependency curl || exit 2\n    \n    printf \"Checking for an existing version for:\\n\"\n    printf \"Provider name:  %s\\n\" \"${PARAM_PROVIDER_NAME}\"\n    printf \"Module name:    %s\\n\" \"${PARAM_MODULE_NAME}\"\n    printf \"Module version: %s\\n\\n\" \"${PARAM_MODULE_VERSION}\"\n    \n    _VERSION_LIST=$(curl \\\n        --fail-early \\\n        --silent \\\n        --request GET \\\n        --header \"Authorization: Bearer ${PARAM_TERRAFORM_TOKEN}\" \\\n        --header \"Content-Type: application/vnd.api+json\" \\\n    \"$API_BASE_PATH/v2/organizations/$ORGANISATION_NAME/registry-modules/private/$ORGANISATION_NAME/${PARAM_MODULE_NAME}/${PARAM_PROVIDER_NAME}\") || _EC=$?\n    \n    if [[ \"${_EC:-0}\" -ne 0 ]]; then\n        printf \"Fail: Unable to query the registry for module:'%s' provider:'%s'.\\n\\nPlease review the input values and check that the Terraform Cloud credentials are correct.\\n\\n\" \"${PARAM_MODULE_NAME}\" \"${PARAM_PROVIDER_NAME}\"\n        exit 2\n    fi\n    \n    EXISTING_VERSION=$(echo \"$_VERSION_LIST\" | jq --arg version \"${PARAM_MODULE_VERSION}\" -c '.data.attributes.\"version-statuses\"[]? | select(.version == $version)')\n    if [[ -n \"${EXISTING_VERSION}\" ]]; then\n        printf  \"Fail: Version '%s' has already been published to Terraform Cloud.\\n\\n\" \"${PARAM_MODULE_VERSION}\"\n        return 1\n    fi\n    \n    printf  \"Success: Version '%s' can be published to Terraform Cloud.\\n\\n\" \"${PARAM_MODULE_VERSION}\"\n    return 0\n}\n\n# Will not run if sourced for bats-core tests.\nORB_TEST_ENV=\"bats-core\"\nif [ \"${0#*\"$ORB_TEST_ENV\"}\" == \"$0\" ]; then\n    can_publish_module_version\nfi\n"
                environment:
                    PARAM_MODULE_NAME: <<parameters.module-name>>
                    PARAM_MODULE_VERSION: <<parameters.module-version>>
                    PARAM_PROVIDER_NAME: <<parameters.provider-name>>
                    PARAM_TERRAFORM_TOKEN: <<parameters.token>>
                name: Check if the module version has been published
    setup:
        description: |
            Configure and store Terraform Cloud credentials in .terraformrc
        parameters:
            root-directory:
                default: .
                description: |
                    The root directory to create the .terraformrc file within
                type: string
            token:
                description: |
                    The API token to be used to access Terraform Cloud
                type: string
        steps:
            - run:
                command: |
                    #!/bin/bash
                    set -euo pipefail

                    # shellcheck source=/dev/null
                    source "circleci-orbs/terraform-registry/scripts/common.sh"

                    setup() {
                        assert_non_empty PARAM_TERRAFORM_TOKEN || exit 2
                        assert_non_empty PARAM_ROOT_DIRECTORY || exit 2

                        echo "credentials \"app.terraform.io\" {token =
                            \"${PARAM_TERRAFORM_TOKEN}\"}" > "${PARAM_ROOT_DIRECTORY}"/.terraformrc

                        printf "Credential file successfully created in the '%s' directory.\n\n" "${PARAM_ROOT_DIRECTORY}"
                    }

                    # Will not run if sourced for bats-core tests.
                    ORB_TEST_ENV="bats-core"
                    if [ "${0#*"$ORB_TEST_ENV"}" == "$0" ]; then
                        setup
                    fi
                environment:
                    PARAM_ROOT_DIRECTORY: <<parameters.root-directory>>
                    PARAM_TERRAFORM_TOKEN: <<parameters.token>>
                name: Configure Terraform Cloud credentials

